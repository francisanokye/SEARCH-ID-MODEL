library(pomp)
covSEIR |> pfilter(params= guess_params,  Np = 5000)
} -> pf
plot(pf)
pf %>% logLik() %>% logmeanexp(se = TRUE)
cl = makeCluster(1L)
registerDoParallel(cores = detectCores())
registerDoRNG(625904618)
guess_params =c(Beta = 10.0, sigma = 1/3, gamma = 1/14, rho = 0.9, k = 0.5,  N = 510550)
registerDoRNG(1235252)
foreach(i=1:10, .combine = c) %dopar% {
library(pomp)
covSEIR |> pfilter(params= guess_params,  Np = 5000)
} -> pf
plot(pf)
pf %>% logLik() %>% logmeanexp(se = TRUE)
cl = makeCluster(1L)
registerDoParallel(cores = detectCores())
registerDoRNG(625904618)
guess_params =c(Beta = 0.05, sigma = 1/3, gamma = 1/14, rho = 0.01, k = 2.5,  N = 510550)
registerDoRNG(1235252)
foreach(i=1:10, .combine = c) %dopar% {
library(pomp)
covSEIR |> pfilter(params= guess_params,  Np = 5000)
} -> pf
plot(pf)
pf %>% logLik() %>% logmeanexp(se = TRUE)
library(pomp)
seir_step <- Csnippet("
// #####################################
// Compute the transition rates
// #####################################
double dN_SE = rbinom(S,1-exp(-Beta * I/N * dt));
double dN_EI = rbinom(E,1-exp(- sigma * dt));
double dN_IR = rbinom(I,1-exp(-gamma * dt));
S -= dN_SE;
E += dN_SE - dN_EI;
I += dN_EI - dN_IR;
R += dN_IR;
Incidence += dN_EI - dN_IR;
")
seir_init <- Csnippet("
E = 0;
I = 25;
R = 0;
S = N - E -I - R;
Incidence = 0;
")
dmeas <- Csnippet("
if (Beta < 0) {
lik = (give_log) ? R_NegInf : 0.0;
} else {
lik = dnbinom_mu(cases, k , Incidence * rho, give_log);
if (!give_log & lik <= 0) {
lik = R_NegInf;
} else if (!give_log) {
lik = log(lik);
}
}
")
############## DEFINE PROCESS SIMULATOR ##############
# Generates observations based on the specified distribution
rmeas <- Csnippet("
if (Beta < 0) {
Rf_error(\"Invalid state values\");
}else{
cases = rnbinom_mu(k , Incidence * rho);
}")
fixed_params_names <- c("N","sigma", "gamma")
params_to_estimate <- c("Beta", "k", "rho")
paramnames <- c(params_to_estimate, fixed_params_names)
merged_data |>
dplyr::select(day, cases) -> df
df %>%
pomp(
times = "day",
t0 = 0,
rprocess = discrete_time(seir_step, delta.t = 1.0),
rinit = seir_init,
rmeasure = rmeas,
dmeasure = dmeas,
accumvars = "Incidence",
#partrans = parameter_trans(log = c("Beta","sigma","gamma","k"), logit = c("rho")),
paramnames = paramnames,
obsnames = c("cases"),
statenames = c("S","E","I","R","Incidence")
) -> covSEIR
cl = makeCluster(1L)
registerDoParallel(cores = detectCores())
registerDoRNG(625904618)
guess_params =c(Beta = 0.05, sigma = 1/3, gamma = 1/14, rho = 0.01, k = 2.5,  N = 510550)
registerDoRNG(1235252)
foreach(i=1:10, .combine = c) %dopar% {
library(pomp)
covSEIR |> pfilter(params= guess_params,  Np = 5000)
} -> pf
cl = makeCluster(1L)
registerDoParallel(cores = detectCores())
registerDoRNG(625904618)
guess_params =c(Beta = 0.05, sigma = 1/3, gamma = 1/14, rho = 0.9, k = 2.5,  N = 510550)
registerDoRNG(1235252)
foreach(i=1:10, .combine = c) %dopar% {
library(pomp)
covSEIR |> pfilter(params= guess_params,  Np = 5000)
} -> pf
cl = makeCluster(1L)
registerDoParallel(cores = detectCores())
registerDoRNG(625904618)
guess_params =c(Beta = 0.05, sigma = 1/3, gamma = 1/14, rho = 0.9, k = 0.05,  N = 510550)
registerDoRNG(1235252)
foreach(i=1:10, .combine = c) %dopar% {
library(pomp)
covSEIR |> pfilter(params= guess_params,  Np = 5000)
} -> pf
library(pomp)
seir_step <- Csnippet("
// #####################################
// Compute the transition rates
// #####################################
double dN_SE = rbinom(S,1-exp(-Beta * I/N * dt));
double dN_EI = rbinom(E,1-exp(- sigma * dt));
double dN_IR = rbinom(I,1-exp(-gamma * dt));
S -= dN_SE;
E += dN_SE - dN_EI;
I += dN_EI - dN_IR;
R += dN_IR;
Incidence += dN_EI - dN_IR;
")
seir_init <- Csnippet("
E = 0;
I = 25;
R = 0;
S = N - E -I - R;
Incidence = 0;
")
dmeas <- Csnippet("
if (Beta < 0) {
lik = (give_log) ? R_NegInf : 0.0;
} else {
lik = dnbinom_mu(cases, 1/k , Incidence * rho, give_log);
if (!give_log & lik <= 0) {
lik = R_NegInf;
} else if (!give_log) {
lik = log(lik);
}
}
")
############## DEFINE PROCESS SIMULATOR ##############
# Generates observations based on the specified distribution
rmeas <- Csnippet("
if (Beta < 0) {
Rf_error(\"Invalid state values\");
}else{
cases = rnbinom_mu(1/k , Incidence * rho);
}")
fixed_params_names <- c("N","sigma", "gamma")
params_to_estimate <- c("Beta", "k", "rho")
paramnames <- c(params_to_estimate, fixed_params_names)
merged_data |>
dplyr::select(day, cases) -> df
df %>%
pomp(
times = "day",
t0 = 0,
rprocess = discrete_time(seir_step, delta.t = 1.0),
rinit = seir_init,
rmeasure = rmeas,
dmeasure = dmeas,
accumvars = "Incidence",
#partrans = parameter_trans(log = c("Beta","sigma","gamma","k"), logit = c("rho")),
paramnames = paramnames,
obsnames = c("cases"),
statenames = c("S","E","I","R","Incidence")
) -> covSEIR
cl = makeCluster(1L)
registerDoParallel(cores = detectCores())
registerDoRNG(625904618)
guess_params =c(Beta = 0.05, sigma = 1/3, gamma = 1/14, rho = 0.9, k = 0.05,  N = 510550)
registerDoRNG(1235252)
foreach(i=1:10, .combine = c) %dopar% {
library(pomp)
covSEIR |> pfilter(params= guess_params,  Np = 5000)
} -> pf
cl = makeCluster(1L)
registerDoParallel(cores = detectCores())
registerDoRNG(625904618)
guess_params =c(Beta = 0.05, sigma = 1/3, gamma = 1/14, rho = 0.9, k = 2.05,  N = 510550)
registerDoRNG(1235252)
foreach(i=1:10, .combine = c) %dopar% {
library(pomp)
covSEIR |> pfilter(params= guess_params,  Np = 5000)
} -> pf
library(pomp)
seir_step <- Csnippet("
// #####################################
// Compute the transition rates
// #####################################
double dN_SE = rbinom(S,1-exp(-Beta * I/N * dt));
double dN_EI = rbinom(E,1-exp(- sigma * dt));
double dN_IR = rbinom(I,1-exp(-gamma * dt));
S -= dN_SE;
E += dN_SE - dN_EI;
I += dN_EI - dN_IR;
R += dN_IR;
Incidence += dN_EI - dN_IR;
")
seir_init <- Csnippet("
E = 0;
I = 25;
R = 0;
S = N - E -I - R;
Incidence = 0;
")
dmeas <- Csnippet("
if (Incidence < 0) {
lik = (give_log) ? R_NegInf : 0.0;
} else {
lik = dnbinom_mu(cases, 1/k , Incidence * rho, give_log);
if (!give_log & lik <= 0) {
lik = R_NegInf;
} else if (!give_log) {
lik = log(lik);
}
}
")
############## DEFINE PROCESS SIMULATOR ##############
# Generates observations based on the specified distribution
rmeas <- Csnippet("
if (Beta < 0) {
Rf_error(\"Invalid state values\");
}else{
cases = rnbinom_mu(1/k , Incidence * rho);
}")
fixed_params_names <- c("N","sigma", "gamma")
params_to_estimate <- c("Beta", "k", "rho")
paramnames <- c(params_to_estimate, fixed_params_names)
merged_data |>
dplyr::select(day, cases) -> df
df %>%
pomp(
times = "day",
t0 = 0,
rprocess = discrete_time(seir_step, delta.t = 1.0),
rinit = seir_init,
rmeasure = rmeas,
dmeasure = dmeas,
accumvars = "Incidence",
#partrans = parameter_trans(log = c("Beta","sigma","gamma","k"), logit = c("rho")),
paramnames = paramnames,
obsnames = c("cases"),
statenames = c("S","E","I","R","Incidence")
) -> covSEIR
cl = makeCluster(1L)
registerDoParallel(cores = detectCores())
registerDoRNG(625904618)
guess_params =c(Beta = 0.05, sigma = 1/3, gamma = 1/14, rho = 0.9, k = 2.05,  N = 510550)
registerDoRNG(1235252)
foreach(i=1:10, .combine = c) %dopar% {
library(pomp)
covSEIR |> pfilter(params= guess_params,  Np = 5000)
} -> pf
plot(pf)
pf %>% logLik() %>% logmeanexp(se = TRUE)
library(pomp)
seir_step <- Csnippet("
// #####################################
// Compute the transition rates
// #####################################
double dN_SE = rbinom(S,1-exp(-Beta * I/N * dt));
double dN_EI = rbinom(E,1-exp(- sigma * dt));
double dN_IR = rbinom(I,1-exp(-gamma * dt));
S -= dN_SE;
E += dN_SE - dN_EI;
I += dN_EI - dN_IR;
R += dN_IR;
Incidence += dN_EI - dN_IR;
")
seir_init <- Csnippet("
E = 0;
I = 25;
R = 0;
S = N - E -I - R;
Incidence = 0;
")
dmeas <- Csnippet("
if (Incidence < 0) {
lik = (give_log) ? R_NegInf : 0.0;
} else {
lik = dnbinom_mu(cases, 1/k , Incidence * rho, give_log);
if (!give_log & lik <= 0) {
lik = R_NegInf;
} else if (!give_log) {
lik = log(lik);
}
}
")
############## DEFINE PROCESS SIMULATOR ##############
# Generates observations based on the specified distribution
rmeas <- Csnippet("
if (Incidence < 0) {
Rf_error(\"Invalid state values\");
}else{
cases = rnbinom_mu(1/k , Incidence * rho);
}")
fixed_params_names <- c("N","sigma", "gamma")
params_to_estimate <- c("Beta", "k", "rho")
paramnames <- c(params_to_estimate, fixed_params_names)
merged_data |>
dplyr::select(day, cases) -> df
df %>%
pomp(
times = "day",
t0 = 0,
rprocess = discrete_time(seir_step, delta.t = 1.0),
rinit = seir_init,
rmeasure = rmeas,
dmeasure = dmeas,
accumvars = "Incidence",
#partrans = parameter_trans(log = c("Beta","sigma","gamma","k"), logit = c("rho")),
paramnames = paramnames,
obsnames = c("cases"),
statenames = c("S","E","I","R","Incidence")
) -> covSEIR
cl = makeCluster(1L)
registerDoParallel(cores = detectCores())
registerDoRNG(625904618)
guess_params =c(Beta = 0.05, sigma = 1/3, gamma = 1/14, rho = 0.9, k = 2.05,  N = 510550)
registerDoRNG(1235252)
foreach(i=1:10, .combine = c) %dopar% {
library(pomp)
covSEIR |> pfilter(params= guess_params,  Np = 5000)
} -> pf
plot(pf)
pf %>% logLik() %>% logmeanexp(se = TRUE)
cl = makeCluster(1L)
registerDoParallel(cores = detectCores())
registerDoRNG(625904618)
guess_params =c(Beta = 0.05, sigma = 1/3, gamma = 1/14, rho = 0.9, k = 20.05,  N = 510550)
registerDoRNG(1235252)
foreach(i=1:10, .combine = c) %dopar% {
library(pomp)
covSEIR |> pfilter(params= guess_params,  Np = 5000)
} -> pf
plot(pf)
pf %>% logLik() %>% logmeanexp(se = TRUE)
cl = makeCluster(1L)
registerDoParallel(cores = detectCores())
registerDoRNG(625904618)
guess_params =c(Beta = 0.5, sigma = 1/3, gamma = 1/14, rho = 0.9, k = 20.05,  N = 510550)
registerDoRNG(1235252)
foreach(i=1:10, .combine = c) %dopar% {
library(pomp)
covSEIR |> pfilter(params= guess_params,  Np = 5000)
} -> pf
plot(pf)
pf %>% logLik() %>% logmeanexp(se = TRUE)
cl = makeCluster(1L)
registerDoParallel(cores = detectCores())
registerDoRNG(625904618)
guess_params =c(Beta = 0.01, sigma = 1/3, gamma = 1/14, rho = 0.9, k = 20.05,  N = 510550)
registerDoRNG(1235252)
foreach(i=1:10, .combine = c) %dopar% {
library(pomp)
covSEIR |> pfilter(params= guess_params,  Np = 5000)
} -> pf
plot(pf)
pf %>% logLik() %>% logmeanexp(se = TRUE)
covSEIR |>
simulate(params = guess_params,nsim=1, format="data.frame", include.data=TRUE) |>
dplyr:::select.data.frame(c(".id","day","cases")) |>
reshape2::melt(id = c(".id", "day")) |>
ggplot(aes(x=day,y=value,color=ifelse(.id=="data","data","simulation"),group=.id))+
scale_color_manual(labels = c("True Cases", "Model Simulation"),values = c("black","#00A087B2"))+
labs(color="")+
geom_point()+
geom_smooth(span = 0.15) +
theme_clean()+
scale_color_manual(values = c("red","navy")) +
theme(axis.text.x = element_text(size = 14), axis.title.x = element_text(size = 14,color = "black"),
axis.text.y = element_text(size = 14), axis.title.y = element_text(size = 14,color = "black"),
plot.title = element_text(size = 14, face = "bold", color = "black",hjust = 0.5))+
ggtitle("Simulation With Initial Guess Parameters.") +
theme(plot.title = element_text(hjust = 0.5)) +
facet_wrap(~variable,ncol=1,scales="free_y")
cl = makeCluster(1L)
registerDoParallel(cores = detectCores())
registerDoRNG(625904618)
guess_params =c(Beta = 0.01, sigma = 1/3, gamma = 1/14, rho = 0.5, k = 2.05,  N = 510550)
registerDoRNG(1235252)
foreach(i=1:10, .combine = c) %dopar% {
library(pomp)
covSEIR |> pfilter(params= guess_params,  Np = 5000)
} -> pf
plot(pf)
pf %>% logLik() %>% logmeanexp(se = TRUE)
cl = makeCluster(1L)
registerDoParallel(cores = detectCores())
registerDoRNG(625904618)
guess_params =c(Beta = 0.01, sigma = 1/3, gamma = 1/14, rho = 0.5, k = 0.05,  N = 510550)
registerDoRNG(1235252)
foreach(i=1:10, .combine = c) %dopar% {
library(pomp)
covSEIR |> pfilter(params = guess_params,  Np = 5000)
} -> pf
plot(pf)
pf %>% logLik() %>% logmeanexp(se = TRUE)
library(macpan2)
library(shellpipes)
rpcall("calibrate.Rout calibrate.R timevar_spec.rds seroprevdata.rds params.rda timevar_spec.R")
library(conflicted)
library(tidyverse)
library(dplyr)
library(ggthemes)
library(broom.mixed)
set.seed(2024)
#conflicted_prefer("rdsSave", "shellpipes")
loadEnvironments()
setwd("~/Documents/MUN/SEARCH-ID-MODEL/searchid/macpan2/codes/seir")
library(macpan2)
library(shellpipes)
rpcall("calibrate.Rout calibrate.R timevar_spec.rds seroprevdata.rds params.rda timevar_spec.R")
library(conflicted)
library(tidyverse)
library(dplyr)
library(ggthemes)
library(broom.mixed)
set.seed(2024)
#conflicted_prefer("rdsSave", "shellpipes")
loadEnvironments()
timevar_spec <- rdsRead("timevar_spec.rds")
seroprevdata <- rdsRead("seroprevdata.rds")
outputs = c("S", "E", "I", "R", "cases","sero_cases","serop", "report_prob")
population = 510550
head(seroprevdata)
calibrator <- mp_tmb_calibrator(
spec = timevar_spec |> mp_hazard()
, data = seroprevdata
, traj = list(
cases = mp_neg_bin(disp = mp_fit(1))
, serop = mp_log_normal(sd = mp_nofit(0.5))
)
, outputs = c(outputs)
, par = list(beta_values = mp_log_normal(params$beta,1))
, tv = mp_rbf("report_prob", 15, fit_prior_sd = FALSE, prior_sd = 1)
, time = mp_sim_bounds(-30, 432, "daily")
)
mp_optimize(calibrator)
rp = mp_trajectory(calibrator) |> dplyr::filter(matrix == "report_prob")|> pull(value)
print(rp)
rdsSave(calibrator)
library(macpan2)
library(shellpipes)
rpcall("calibrate.Rout calibrate.R timevar_spec.rds seroprevdata.rds params.rda timevar_spec.R")
library(conflicted)
library(tidyverse)
library(dplyr)
library(ggthemes)
library(broom.mixed)
set.seed(2024)
#conflicted_prefer("rdsSave", "shellpipes")
loadEnvironments()
timevar_spec <- rdsRead("timevar_spec.rds")
seroprevdata <- rdsRead("seroprevdata.rds")
outputs = c("S", "E", "I", "R", "cases","sero_cases","serop", "report_prob")
population = 510550
head(seroprevdata)
calibrator <- mp_tmb_calibrator(
spec = timevar_spec |> mp_hazard()
, data = seroprevdata
, traj = list(
cases = mp_neg_bin(disp = mp_fit(1))
, serop = mp_log_normal(sd = mp_nofit(0.5))
)
, outputs = c(outputs)
, par = list(beta_values = mp_log_normal(params$beta,1))
, tv = mp_rbf("report_prob", 15, fit_prior_sd = FALSE, prior_sd = 1)
, time = mp_sim_bounds(-30, 432, "daily")
)
mp_optimize(calibrator)
rp = mp_trajectory(calibrator) |> dplyr::filter(matrix == "report_prob")|> pull(value) |>plot()
rdsSave(calibrator)
library(macpan2)
library(shellpipes)
rpcall("calibrate.Rout calibrate.R timevar_spec.rds seroprevdata.rds params.rda timevar_spec.R")
library(conflicted)
library(tidyverse)
library(dplyr)
library(ggthemes)
library(broom.mixed)
set.seed(2024)
#conflicted_prefer("rdsSave", "shellpipes")
loadEnvironments()
timevar_spec <- rdsRead("timevar_spec.rds")
seroprevdata <- rdsRead("seroprevdata.rds")
outputs = c("S", "E", "I", "R", "cases","sero_cases","serop", "report_prob")
population = 510550
head(seroprevdata)
calibrator <- mp_tmb_calibrator(
spec = timevar_spec |> mp_hazard()
, data = seroprevdata
, traj = list(
cases = mp_neg_bin(disp = mp_fit(1))
, serop = mp_log_normal(sd = mp_nofit(0.5))
)
, outputs = c(outputs)
, par = list(beta_values = mp_log_normal(params$beta,1))
, tv = mp_rbf("report_prob", 15, fit_prior_sd = FALSE, prior_sd = 1)
, time = mp_sim_bounds(-30, 432, "daily")
)
mp_optimize(calibrator)
rp = mp_trajectory(calibrator) |> dplyr::filter(matrix == "report_prob")|> pull(value) |>dput()
rdsSave(calibrator)
